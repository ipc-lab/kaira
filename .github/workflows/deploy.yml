name: Deploy to PyPI

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering
  workflow_run:
    workflows: [
        "Python CI",
        "Tests",
        "Generate Auto Examples",
        "Update Changelog Documentation",
        "Pre-commit Checks",
      ] # Trigger after CI and Tests complete
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  id-token: write # For trusted publishing to PyPI

jobs:
  check-version:
    runs-on: ubuntu-latest
    # Only run if workflow_run was successful or if triggered by push/manual
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for version comparison

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from kaira/version.py
          CURRENT_VERSION=$(python -c "from kaira.version import __version__; print(__version__)")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

          # Check if this version exists on PyPI using simple curl
          if curl -f -s "https://pypi.org/pypi/pykaira/$CURRENT_VERSION/json" > /dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already exists on PyPI"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION is new"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  deploy-pypi:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: Clean build artifacts
        run: |
          # Clean Python build artifacts and cache files
          find . -type d -name "__pycache__" -exec rm -rf {} + || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + || true
          find . -type d -name ".eggs" -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          find . -type f -name "*.pyo" -delete || true
          find . -type f -name "*.pyd" -delete || true
          find . -type f -name ".coverage" -delete || true
          find . -type f -name "coverage.xml" -delete || true
          find . -type d -name ".pytest_cache" -exec rm -rf {} + || true
          find . -type d -name ".coverage*" -exec rm -rf {} + || true
          find . -type d -name "htmlcov" -exec rm -rf {} + || true

          # Clean documentation build artifacts
          rm -rf docs/_build/ || true
          rm -rf docs/gen_modules/ || true
          rm -rf docs/generated/ || true
          rm -rf docs/auto_examples/ || true

          # Remove build and dist directories
          rm -rf build/ dist/ ./*.egg-info/ || true

      - name: Build distribution packages
        run: |
          echo "Building distribution for version ${{ needs.check-version.outputs.current-version }}"
          python setup.py sdist bdist_wheel

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use API token stored in repository secrets
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Verify deployment
        run: |
          # Wait a bit for the package to be available
          sleep 30

          # Try to install from PyPI
          pip install pykaira==${{ needs.check-version.outputs.current-version }}

          # Basic import test
          python -c "import kaira; print(f'Successfully deployed kaira version: {kaira.__version__}')"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.current-version }}
          name: Release v${{ needs.check-version.outputs.current-version }}
          body: |
            ## Changes in v${{ needs.check-version.outputs.current-version }}

            This release has been automatically deployed to PyPI.

            Install with: `pip install pykaira==${{ needs.check-version.outputs.current-version }}`
          draft: false
          prerelease: false
