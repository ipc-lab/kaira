name: Tests

on:
  push:
    branches: [master, main, dev]
  pull_request:
    branches: [master, main, dev]

# Cancel previous runs if a new push happens
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: self-hosted # Replaced matrix.os
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # Use only Python 3.10 for dev branch, all versions for main/master
        python-version: ${{ github.ref == 'refs/heads/dev' && fromJSON('["3.10"]') || fromJSON('["3.10", "3.11", "3.12", "3.13"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install BPG tools
        run: |
          echo "🔧 Installing BPG (Better Portable Graphics) tools..."

          # Create local bin directory for BPG tools
          BPG_BIN_DIR="$HOME/.local/bin"
          mkdir -p "$BPG_BIN_DIR"

          # Add to PATH for this session and future steps
          echo "$BPG_BIN_DIR" >> $GITHUB_PATH
          export PATH="$BPG_BIN_DIR:$PATH"

          # Check if BPG tools are already installed
          if command -v bpgenc &> /dev/null && command -v bpgdec &> /dev/null; then
            echo "✅ BPG tools already installed"
            bpgenc 2>&1 | head -n 3 || true
          else
            echo "📦 Installing BPG tools from source..."

            # Check if build tools are available, skip dependency installation if not root
            if ! command -v gcc &> /dev/null || ! command -v make &> /dev/null; then
              echo "⚠️ Build tools not available, attempting to continue without installing dependencies..."
              echo "🔍 Available compilers:"
              which gcc || echo "gcc not found"
              which clang || echo "clang not found"
              which make || echo "make not found"
            fi

            # Download and compile BPG
            cd /tmp
            wget -q https://bellard.org/bpg/bpg-0.9.8.tar.gz
            tar xzf bpg-0.9.8.tar.gz
            cd bpg-0.9.8

            # Try to compile BPG tools
            echo "🔨 Compiling BPG tools..."
            if make; then
              echo "✅ BPG compilation successful"

              # Install to user bin directory
              cp bpgenc bpgdec "$BPG_BIN_DIR/"
              chmod +x "$BPG_BIN_DIR/bpgenc" "$BPG_BIN_DIR/bpgdec"

              # Verify installation
              if command -v bpgenc &> /dev/null && command -v bpgdec &> /dev/null; then
                echo "✅ BPG tools installed successfully to $BPG_BIN_DIR"
                bpgenc 2>&1 | head -n 3 || true
              else
                echo "❌ BPG tools installation failed - not found in PATH"
                exit 1
              fi
            else
              echo "❌ BPG compilation failed"
              echo "🔍 Checking for required dependencies..."
              pkg-config --exists libjpeg libpng libtiff-4 || echo "Some image libraries may be missing"
              exit 1
            fi
          fi
        shell: bash

      - name: Install dependencies
        run: |
          echo "🔧 Installing dependencies for Python ${{ matrix.python-version }}..."
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov

          # Install package in development mode
          pip install -e .[dev]

          # Install additional dev requirements if they exist
          if [ -f requirements-dev.txt ]; then
            echo "📦 Installing requirements-dev.txt..."
            pip install -r requirements-dev.txt
          fi

          echo "✅ Dependencies installed successfully"
        shell: bash

      - name: Validate test environment
        run: |
          echo "🔍 Validating test environment..."
          python --version
          pip --version
          pytest --version
          python -c "import kaira; print(f'Kaira version: {kaira.__version__}')" || echo "⚠️ Kaira not importable"

          echo "� Validating BPG tools..."
          if command -v bpgenc &> /dev/null && command -v bpgdec &> /dev/null; then
            echo "✅ BPG tools available"
            echo "bpgenc location: $(which bpgenc)"
            echo "bpgdec location: $(which bpgdec)"
          else
            echo "❌ BPG tools not found in PATH"
          fi

          echo "�📊 Installed packages:"
          pip list | head -20

      - name: Test with pytest
        run: |
          echo "🧪 Running tests with pytest..."
          pytest --cov=kaira --cov-report=xml --cov-report=term-missing -v
          echo "✅ Tests completed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            coverage.xml
            pytest.xml
          retention-days: 7

      - name: Generate test summary
        if: always()
        run: |
          echo "# 🧪 Test Results - Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $? -eq 0 ]; then
            echo "✅ **Status**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Environment:" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

          # Add coverage info if available
          if [ -f coverage.xml ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage:" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated and uploaded as artifact." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml # Changed 'file' to 'files'
          token: ${{ secrets.CODECOV_TOKEN }} # Add this line
          fail_ci_if_error: false
